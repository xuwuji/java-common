Mybatis 缓存

1.一级缓存
一级缓存指的是SqlSession级别，基于 PerpetualCache(mybatis自带)的 HashMap本地缓存
执行的查询会根据SQL为key被缓存,修改任何参数的值都会导致缓存失效。

简单来说就是，认为当执行一个sql，结果就是xxx

下次再执行这个sql，就直接拿出这个结果xxx

当session commit或close后，这个session内的缓存就会清空，避免脏读。


2.二级缓存
二级缓存就是global caching,它超出session范围之外,可以被所有sqlSession共享
它的实现机制和mysql的缓存一样,开启它只需要在mybatis的配置文件开启settings里的

<setting name="cacheEnabled" value="true"/>

以及在相应的Mapper文件(例如userMapper.xml)里开启

<mapper namespace="mapper.UserMapper">
   ...  select statement ...
       <!-- Cache 配置 -->
    <cache
        eviction="FIFO"
        flushInterval="60000"
        size="512"
        readOnly="true" />
</mapper>

需要注意的是global caching的作用域是针对Mapper的Namespace而言的,也就是说只在有在这个Namespace内的查询才能共享这个cache.


3.整合分布式缓存ehcache框架

如果不整合分布式缓存，那么缓存的数据只会在本机进行缓存

所以要对所有服务器中的缓存进行集中管理，从而使用分布式缓存管理框架，相当于所有服务器都从一个地方拿缓存。

mybatis提供一个cache接口，通过接口实现里面的方法，与ehcache进行操作，放数据放入至缓存中。

如果用redis，也是同样的道理。

mybatis默认的cache实现类为mybatis本身自带的PerpetualCache
如果要和ehcache进行整合， 就要把cache的type设为ehcache的实现类
	
<mapper namespace="com.xuwuji.db.mapper.SearchMapper">
<cache type="org.mybatis.caches.ehcache.EhcacheCache" eviction="FIFO" flushInterval="60000" size="512" readOnly="true" />
		
之后需要ehcache的配置文件xml

4.二级缓存应用
（1）实时性要求不高
（2）降低数据库访问量

通过flushInterval设置多久刷新缓存

局限性就是对细粒度缓存支持不好，比如缓存了一万条记录，其中某一条纪录进行了commit操作，那么所有的记录就会全部清空

5.与spring整合
用spring去管理sqlsessionfactory

6.mybatis延迟加载

resultMap可以实现关联映射

先从简单的表进行查询，再从关联表去关联查询，提高数据库性能
