数据库优化
（1）范式
（2）SQL优化
（3）索引
四种：普通索引、主键索引、唯一索引（unique）、全文索引
（4）分表
a.水平分割
b.垂直分割
（5）读写分离
（6）存储过程
程序  ——》dbms（数据库管理系统）——》数据库（文件系统）

在程序中我们写了一句sql，发送给dbms，sql语句在dbms中进行编译，之后在其中执行，并将结果返回的同时进行缓存

但是编译很耗时间，所以可以将sql编译成二进制的代码，存在dbms中，之后快速操作，比如分页／触发器已经编译好的对象

下次不用sql语句，直接在客户端中调用存储过程，操作数据库，并且利用模块化编程，但是移植性差
（7）mysql配置优化
a.配置最大并发数
my.conf中max_connections
b.调整缓存大小
（8）mysql服务器硬件升级
（9）定时清除不需要的数据
（10）定时进行碎片整理，如果引擎是MYISAM的一定要进行整理，不然会越来越大


－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

范式
首先符合一范式，才满足二范式，进一步才满足三范式

（1）一范式：属性（表的列）具有原子性，不可以再继续分解。
Student  Age  Subject
Adam     15   Biology, Maths
应该拆成两条数据
Adam     15   Biology
Adam     15    Maths
（2）二范式：每条记录都是唯一，不会有完全相同的数据，比如设置一个自增的主键
（3）三范式：表中不应该有冗余数据，就是说表的信息如果能够被推倒出来，就不应该被单独地当成一个字段
student表：id Student  Age  SubjectId Subject SubjectTeacher
Subject表：id Subject SubjectTeacher
这里再student表就会有冗余，其实只要通过SubjectId字段，再去Subject表里找，就可以得到Subject SubjectTeacher

－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

慢查询SQL语句

（1）如何从大型项目中，定位执行速度比较慢的sql语句（定位慢查询）

a.mysql数据库的一些运行状态查询：show [session/global] status
	默认为session表示当前会话,也就是当前窗口，若想看mysql从启动到现在所有的状态，用global

在结果中有：
当前连接数：Connections
运行了多久：Uptime
执行了多少次select／update／delete语句：com_select/insert.....
有多少次慢查询：Slow_queries

b.mysql默认认为10秒以上才认为是慢查询,修改mysql慢查询定义：
show variables
show variables like 'long_query_time';
long_query_time | 10.000000 |
set long_query_time = 1; 设置1秒以上就认为是慢查询
这时如果出现了一条语句执行时间超过1秒钟，那么会在Slow_queries中统计

create database learn;
use learn;
set names gbk; //设置编码

c.将慢查询的sql语句记录到日志中，默认情况下，mysql不会记录慢查询sql语句
需要在mysql启动时，指定参数，记录慢查询

－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

索引

通过explain分析如何执行sql语句

-----------------------------------------------------------
聚簇／非聚簇索引
聚簇索引是对磁盘上实际数据重新组织以按指定的一个或多个列的值排序的算法。
特点是存储数据的顺序和索引顺序一致。一般情况下主键会默认创建聚簇索引，且一张表只允许存在一个聚簇索引。

聚簇索引的叶子节点就是数据节点，而非聚簇索引的叶子节点仍然是索引节点，只不过有指向对应数据块的指针。

1、聚簇索引 
a) 一个索引项直接对应实际数据记录的存储页，可谓“直达” 
b) 主键缺省使用它 
c) 索引项的排序和数据行的存储排序完全一致，利用这一点，想修改数据的存储顺序，可以通过改变主键的方法（撤销原有主键，另找也能满足主键要求的一个字段或一组字段，重建主键） 
d) 一个表只能有一个聚簇索引（理由：数据一旦存储，顺序只能有一种） 

2、非聚簇索引 
a) 不能“直达”，可能链式地访问多级页表后，才能定位到数据页 
b) 一个表可以有多个非聚簇索引

-----------------------------------------------------------

一、索引的原理（为什么添加索引后查询速度变快）
若不用索引，则全表扫描，一条条查记录，当查到某一条记录match时，不会结束，还要继续检索到最后一条
因为不设索引，这一列不能保证每个都是唯一的，所以要全部都要扫描

show keys from aaa\G;
*************************** 1. row ***************************
        Table: aaa
   Non_unique: 0
     Key_name: PRIMARY
 Seq_in_index: 1
  Column_name: id
    Collation: A
  Cardinality: 0
     Sub_part: NULL
       Packed: NULL
         Null: 
   Index_type: BTREE
      Comment: 
Index_comment: 
1 row in set (0.00 sec)

mysql中的索引是在存储引擎中实现的 ，mysql有很多存储引擎 但是大部分都采用B+tree作为索引结构的 其中包括myisam和innodb。

myisam索引文件和数据文件是分离的，myisam索引的存储方式是非聚合的，索引文件存储在MYI文件。
（1）扫描此列的所有数据
（2）构造一颗B＋TREE，叶节点中的关键字的指针会指向这条记录的磁盘位置（也就是数据的物理位置）

B+树的定义：
1.有n棵子树的结点中含有n个关键字，每个关键字不保存数据，只用来索引，所有数据都保存在叶子节点。
2.所有的叶子结点中包含了全部关键字的信息，及指向含这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接。
3.所有的非终端结点可以看成是索引部分，结点中仅含其子树（根结点）中的最大（或最小）关键字。
注意：在B+树中，不管查找成功与否，每次查找都是走了一条从根到叶子结点的路径

innodb 索引和数据文件是保存在一起的；数据共享的话会放在ibdata，独享的话会放在ibd
innodb每个表只有一个聚集索引。如果木有主键,则会选择一个非空唯一索引来代替主键；如果再不存在则会定义一个隐藏的主键进行聚集。

-----------------------------------------------------------

二、索引操作：
a.直接创建索引
CREATE INDEX index_name ON table(column(length))
b.修改表结构的方式添加索引
ALTER TABLE table_name ADD INDEX index_name ON (column(length))
c.创建表的时候同时创建索引
CREATE TABLE `table` (
`id` int(11) NOT NULL AUTO_INCREMENT ,
`title` char(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL ,
`content` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL ,
`time` int(10) NULL DEFAULT NULL ,
PRIMARY KEY (`id`),
INDEX index_name (title(length))
)
d.删除索引
DROP INDEX index_name ON table

-----------------------------------------------------------

三、具体操作
a.添加索引
（1）普通索引:这是最基本的索引，它没有任何限制，MyIASM中默认的BTREE类型的索引，也是我们大多数情况下用到的索引。
一般是在建表后，再添加一个索引
create index 索引名 on 表 (列1,列名2);
create index empnoindex on emp(empno)
在emp.MYI中保存了索引信息

（2）主键索引：当一张表中把某一列设为主键时，则该列就是主键索引
create table aaa (id int unsigned primary key auto_increment, name varchar(32) not null default '');
这时id 列就是主键索引，如果你创建表时，没有指定主键索引，也可以在创建表后再添加, 指令:
alter table 表名 add primary key (列名);

（3）唯一索引
当表的某一列被指定为unique约束时，这一列就是唯一索引
create table ddd(id int primary key auto_increment , name varchar(32) unique); 这时, name 列就是一个唯一索引.

mysql> show index from ddd\G;
*************************** 1. row ***************************
        Table: ddd
   Non_unique: 0
     Key_name: PRIMARY
 Seq_in_index: 1
  Column_name: id
    Collation: A
  Cardinality: 0
     Sub_part: NULL
       Packed: NULL
         Null: 
   Index_type: BTREE
      Comment: 
Index_comment: 
*************************** 2. row ***************************
        Table: ddd
   Non_unique: 0
     Key_name: name
 Seq_in_index: 1
  Column_name: name
    Collation: A
  Cardinality: 0
     Sub_part: NULL
       Packed: NULL
         Null: YES
   Index_type: BTREE
      Comment: 
Index_comment: 
2 rows in set (0.00 sec)

unique这一列是可以为空的，而且多个空是可以的，因为认为空的时候不认为是重复的
mysql> select * from ddd;
+----+------+
| id | name |
+----+------+
|  1 | NULL |
|  2 | NULL |
+----+------+

但是相同的值是不能添加进去的
mysql> insert into ddd values (3,'a');
Query OK, 1 row affected (0.01 sec)

mysql> insert into ddd values (4,'a');
ERROR 1062 (23000): Duplicate entry 'a' for key 'name'

create unique index indexname on tablename (columnname)

（4）全文索引：主要针对文本的检索，比如文章
MyisAM支持全文索引（FULLTEXT）、压缩索引，InnoDB不支持
innoDB支持事务，MyisAM不支持

CREATE TABLE articles (
       id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,
       title VARCHAR(200),
       body TEXT,
       FULLTEXT (title,body)
     )engine=myisam charset utf8;

i.全文索引(mysql自己提供的)只针对英文有效，使用方法：select * from articles where match(title,body) against(‘database’); 
ii.用sphinx（coreseek）来处理中文

mysql> explain select * from articles where match(title,body) against('database')\G;
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: articles
   partitions: NULL
         type: fulltext
possible_keys: title
          key: title
      key_len: 0
          ref: const
         rows: 1
     filtered: 100.00
        Extra: Using where
1 row in set, 1 warning (0.00 sec)

通过以下来查看fulltext索引对每一条的匹配度
mysql> select match(title,body) against('database'),title,body from articles;
+---------------------------------------+-----------------------+------------------------------------------+
| match(title,body) against('database') | title                 | body                                     |
+---------------------------------------+-----------------------+------------------------------------------+
|                    0.6554583311080933 | MySQL Tutorial        | DBMS stands for DataBase ...             |
|                                     0 | How To Use MySQL Well | After you went through a ...             |
|                                     0 | Optimizing MySQL      | In this tutorial we will show ...        |
|                                     0 | 1001 MySQL Tricks     | 1. Never run mysqld as root. 2. ...      |
|                    0.6626645922660828 | MySQL vs. YourSQL     | In the following database comparison ... |
|                                     0 | MySQL Security        | When configured properly, MySQL ...      |
+---------------------------------------+-----------------------+------------------------------------------+


b.查询索引
(1)desc tablename 此时不能显示索引名
(2)show index from tablename\G
(3)show keys from tablename\G

c.删除索引
（1）普通删除
alter table tablename drop index indexname;
（2）删除主键
alter table tablename primary key  //因为主键只有一个，所以不用指定索引名，但是需要先删除自增长再删
alter table ddd change id id int(11) not null;
alter table ddd drop primary key;

d.改索引
先删除，再重新创建.

-----------------------------------------------------------

索引使用的注意事项

缺点：
1.磁盘空间占用
2.对查询变快，但是dml（update／delete／insert）会变慢，因为每次操作的时候都要对索引的B+树进行操作

建议：
1.在较频繁的作为查询条件创建索引
2.不会出现在where条件中的不用建索引
3.更新非常频繁的字段不该建索引

索引无效的情况：
1.如果表中有复合索引(索引作用在多列上)，查询条件只有在使用了最左边的列才会使用该索引。
对于多列索引，如果使用的不是最左边的列，则不会使用索引
alter table dept add index my_ind (dname,loc); //  dname 左边的列,loc就是右边的列
explain select * from dept where loc='aaa'\G 
就不会使用到索引
2.如果where中有or，则就算有索引，也不会使用，要想使用or，又想让索引生效，只能将or条件中的每个列都加上索引，所以要避免使用or
mysql> explain select * from emp where empno =222222 or empno=22222223;
+----+-------------+-------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+
| id | select_type | table | partitions | type  | possible_keys | key        | key_len | ref  | rows | filtered | Extra                 |
+----+-------------+-------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+
|  1 | SIMPLE      | emp   | NULL       | range | empnoindex    | empnoindex | 3       | NULL |    1 |   100.00 | Using index condition |
+----+-------------+-------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+
1 row in set, 1 warning (0.00 sec)
由于or条件都是empno，而empno是index，所以此时会使用索引

但是在下面ename不是index，此时就会全表扫描
mysql> explain select * from emp where empno =222222 or empno=22222223 or ename='john';
+----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------------+
| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows    | filtered | Extra       |
+----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------------+
|  1 | SIMPLE      | emp   | NULL       | ALL  | empnoindex    | NULL | NULL    | NULL | 4000000 |    10.00 | Using where |
+----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------------+
1 row in set, 1 warning (0.00 sec)

3.like查询是以%开头或_这样的通配符无效,如果前面要有变化值，则考虑使用全文索引，但是以％结尾可以用
4.如果列类型是字符串，那一定要在条件中将数据使用引号引用起来,否则不使用索引
5.如果mysql自己发现全表扫描比使用索引快，那么此时不会使用索引


一般情况下，在查询时MySQL将自己决定是否使用索引，使用哪一个索引。
但在一些特殊情况下，我们希望MySQL只使用一个或几个索引，或者不希望使用某个索引。这就需要使用MySQL的控制索引的一些查询选项。

有时我们在数据表里建立了很多索引，当MySQL对索引进行选择时，这些索引都在考虑的范围内。
但有时我们希望MySQL只考虑几个索引，而不是全部的索引，这就需要用到USE INDEX对查询语句进行设置。 
SELECT * FROM TABLE1 USE INDEX (FIELD1, FIELD2) … 
从以上SQL语句可以看出，无论在TABLE1中已经建立了多少个索引，MySQL在选择索引时，只考虑在FIELD1和FIELD2上建立的索引。 

如果我们要考虑的索引很多，而不被使用的索引又很少时，可以使用IGNORE INDEX进行反向选取。
在上面的例子中是选择被考虑的索引，而使用IGNORE INDEX是选择不被考虑的索引。 
SELECT * FROM TABLE1 IGNORE INDEX (FIELD1, FIELD2) … 
在上面的SQL语句中，TABLE1表中只有FIELD1和FIELD2上的索引不被使用。 

强迫使用某一个索引 
上面的两个例子都是给MySQL提供一个选择，也就是说MySQL并不一定要使用这些索引。
而有时我们希望MySQL必须要使用某一个索引(由于 MySQL在查询时只能使用一个索引，因此只能强迫MySQL使用一个索引)。
这就需要使用FORCE INDEX来完成这个功能。 
SELECT * FROM TABLE1 FORCE INDEX (FIELD1) … 
以上的SQL语句只使用建立在FIELD1上的索引，而不使用其它字段上的索引。 

group by后会默认进行排序，可以添加order by null强制不排序

-----------------------------------------------------------

数据库引擎

show create table tablename查看表的引擎

（1） MyISAM
a.管理非事务表
b.它提供高速存储和检索，以及全文搜索能力。批量插入速度高，每次插的时候都要数据放在最后，不排序
c.不支持外键
d.不支持行级锁，只提供了表锁 
e.不支持数据缓存
f.索引为B+树

（2）Innodb
MyISAM在所有MySQL配置里被支持，5.5后innodb是默认的存储引擎，除非你配置MySQL默认使用另外一个引擎。
a.对事务要求高，可以回滚，保存的都是重要数据。
b.不支持全文索引，如果需要在线热备份，那么选择InnoDB就是基本的要求.批量插入速度低，每次都要事务处理，并且一定的排序
c.支持外键
d.行级锁
e.支持数据缓存
f.索引为B+树

（3）Memory：所有数据置于内存的存储引擎，拥有极高的插入，更新和查询效率。
但是会占用和数据量成正比的内存空间。并且其内容会在Mysql重新启动时丢失
每次重启mysql，数据会丢失

如果你的数据库的存储引擎是myisam,请一定记住要定时进行碎片整理
不然的话，就算进行了delete操作，文件并不会变小
用指令optimize table tablename;会把之前删除的数据清除掉

---------------------------------------------------------------

备份

---------------------------------------------------------------

分表

---------------------------------------------------------------

读写分离

在master进行写入操作后，通过mysqlproxy进行复制到slave






